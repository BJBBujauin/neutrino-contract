{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Main Smart Contract of Neutrino Protocol
# Implemented actions: Swap, Bond Liquidation, Leasing
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    match getInteger(this, key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByKey(key: String) = {
    match getString(this, key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByKey(key: String) = {
    match getBoolean(this, key) {
            case a:Boolean => a
            case _ => false
    }
}
func getNumberByAddressAndKey(address: String, key: String) = {
    match getInteger(addressFromStringValue(address), key) {
            case a:Int => a
            case _ => 0
    }
}
func getStringByAddressAndKey(address: String, key: String) = {
     match getString(addressFromStringValue(address), key) {
            case a:String => a
            case _ => ""
    }
}
func getBoolByAddressAndKey(address: String, key: String) = {
     match getBoolean(addressFromStringValue(address), key) {
            case a:Boolean => a
            case _ => false
    }
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
let DEFICITOFFSET = 5

#-------------------Constructor-------------------------
let NeutrinoAssetIdKey = "neutrino_asset_id"
let BondAssetIdKey = "bond_asset_id"
let AuctionContractKey = "auction_contract"
let LiquidationContractKey = "liquidation_contract"
let ContolContractKey = "control_contract"
let BalanceWavesLockIntervalKey = "balance_waves_lock_interval"
let BalanceNeutrinoLockIntervalKey = "balance_neutrino_lock_interval"
let MinWavesSwapAmountKey = "min_waves_swap_amount"
let MinNeutrinoSwapAmountKey = "min_neutrino_swap_amount"
let NodeOracleProviderPubKeyKey = "node_oracle_provider"

#-------------------Keys---------------------------------
#------Control contract-------
let PricesKey = "prices"
let DeficitKey = "deficit"
let ProvidingIndexKey = "providing_index"
let IsBlockedKey = "is_blocked"

func getPricesHistoryKey(block: Int) = PricesKey + "_" + toString(block)
func getHeightByProvidingIndexKey(index: Int) = ProvidingIndexKey + "_" + toString(index)

#------This contract----------
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let AssetsKey = "assets"
let SwapAssetIndexKey = "swap_asset_index"

func getWavesLockedBalanceKey(owner: String) = WavesLockedBalanceKey + "_" + owner
func getNeutrinoLockedBalanceKey(owner: String) = NeutrinoLockedBalanceKey + "_" + owner
func getBalanceUnlockBlockKey(owner: String) = "balance_unlock_block_" + owner

#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, 100, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, 100), PAULI, WAVELET)
func convertNeutrinoToBond(amount: Int) = amount/PAULI 
func convertBondToNeutrino(amount: Int) = amount*PAULI 
func convertWavesToBond(amount: Int, price: Int) = convertNeutrinoToBond(convertWavesToNeutrino(amount, price))
func convertJsonArrayToList(jsonArray: String) = {
   jsonArray.split(",") #jsonArray.take(size(jsonArray)-1).drop(1).split(",")
}

#-------------------Global vars-------------------------
let liquidationContract = getStringByKey(LiquidationContractKey)
let neutrinoAssetId = fromBase58String(getStringByKey(NeutrinoAssetIdKey))
let auctionContract = getStringByKey(AuctionContractKey)
let controlContract = getStringByKey(ContolContractKey)
let providingIndex = getNumberByAddressAndKey(controlContract, ProvidingIndexKey) # Last price history iterator from control.ride
let isBlocked = getBoolByAddressAndKey(controlContract,IsBlockedKey) # Checks for contract locks that might happen after attacks.  The var is read from control contract
let nodeOracleProviderPubKey = fromBase58String(getStringByKey(NodeOracleProviderPubKeyKey))
let balanceWavesLockInterval = getNumberByKey(BalanceWavesLockIntervalKey)
let balanceNeutrinoLockInterval = getNumberByKey(BalanceNeutrinoLockIntervalKey)
let minWavesSwapAmount = getNumberByKey(MinWavesSwapAmountKey)
let minNeutrinoSwapAmount = getNumberByKey(MinNeutrinoSwapAmountKey)
let bondAssetId = fromBase58String(getStringByKey(BondAssetIdKey))

let neutrinoContract = this
#-------------------Global vars deficit, locked & supply -------------------------
let currentPrices = getStringByAddressAndKey(controlContract, PricesKey) # The value from control.ride
let deficit = getNumberByAddressAndKey(controlContract, DeficitKey) # The value from control.ride
let surplus = -1*deficit

let assets = getStringByKey(AssetsKey)
#-------------------Get functions----------------------
#------Control contract------
# The func is reading price from control.ride price history
func getPricesHistory(block: Int) = getStringByAddressAndKey(controlContract, getPricesHistoryKey(block))
# The func is reading from control.ride price history heights
func getHeightPriceByIndex(index: Int) = getNumberByAddressAndKey(controlContract, getHeightByProvidingIndexKey(index))
#------This contract---------
func getWavesLockedBalance(owner: String) =  getNumberByKey(getWavesLockedBalanceKey(owner))
func getNeutrinoLockedBalance(owner: String) =  getNumberByKey(getNeutrinoLockedBalanceKey(owner))
func getUnlockBalanceBlock(owner : String) = getNumberByKey(getBalanceUnlockBlockKey(owner))
func getAssetIndexSwap(owner: String) = getNumberByKey(SwapAssetIndexKey + "_" + owner)

#-------------------Callable----------------------

# Instant swap of WAVES to Neutrino token at the current price on the smart contract
# [called by user]
@Callable(i)
func swapWavesToNeutrino(assetIndex: Int) = {
    let pmt = extract(i.payment)
    let account = toString(i.caller)
    
    if (pmt.amount < minWavesSwapAmount)
        then throw("The specified Waves amount is less than the required minimum of " + toString(minWavesSwapAmount) + " wavelets.")
    else if (isDefined(pmt.assetId))
        then throw("Only Waves token is allowed for swapping.")
    else if(isBlocked)
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles") # see control.ride
    else if(getUnlockBalanceBlock(account) > height)
        then throw("await " + toString(getUnlockBalanceBlock(account) - height) + " blocks")
    else if (getNeutrinoLockedBalance(account) != 0 || getWavesLockedBalance(account) != 0)
        then throw("please withdraw locked funds first")
    else {
        WriteSet([
            DataEntry(SwapAssetIndexKey, assetIndex),
            DataEntry(getWavesLockedBalanceKey(account), pmt.amount),
            DataEntry(getBalanceUnlockBlockKey(account), height + balanceWavesLockInterval)
        ])
    }
}

# Swap request of Neutrino to WAVES. After {balanceLockInterval} blocks, WAVES tokens will be available for withdrawal
# via {withdraw(account : String)} method at the price that is current at the time when {balanceLockInterval} is reached
# [called by user]
@Callable(i)
func swapNeutrinoToWaves(assetIndex: Int) = {
    let pmt = extract(i.payment)
    let account = toString(i.caller)
    if (pmt.amount < minNeutrinoSwapAmount)
        then throw("The specified Neutrino amount is less than the required minimum of " + toString(minNeutrinoSwapAmount) + " Neutrino cents.")
    else if(isBlocked)
        then throw("The contract is blocked by EMERGENCY SHUTDOWN. Please wait for reactivation by emergency oracles.") # see control.ride
    else if (pmt.assetId != neutrinoAssetId)
        then throw("Only appropriate Neutrino tokens are allowed for swapping.")
    else if(getUnlockBalanceBlock(account) > height)
        then throw("await " + toString(getUnlockBalanceBlock(account) - height) + " blocks")
    else if (getNeutrinoLockedBalance(account) != 0 || getWavesLockedBalance(account) != 0)
        then throw("please withdraw locked funds first")
    else {
        WriteSet([
            DataEntry(SwapAssetIndexKey, assetIndex),
            DataEntry(getNeutrinoLockedBalanceKey(account), pmt.amount),
            DataEntry(getBalanceUnlockBlockKey(account), height + balanceNeutrinoLockInterval)
        ])
    }
}

# Withdraw WAVES from smart contract after {swapNeutrinoToWaves()} request has reached {balanceLockInterval} height
# at the price that is current at the time when {balanceLockInterval} is reached
# [called by user]
@Callable(i)
func withdraw(account : String, index: Int) = {
    let unlockHeight = getUnlockBalanceBlock(account)
    let userWavesLockedBalance = getWavesLockedBalance(account)
    let userNeutrinoLockedBalance = getNeutrinoLockedBalance(account)

    let indexHeight = getHeightPriceByIndex(index)
    let prevIndexHeight = getHeightPriceByIndex(index-1)
    let pricesByIndex = getPricesHistory(indexHeight).split(",")
    let assetIndex = getAssetIndexSwap(account)

    let price =  parseIntValue(pricesByIndex[assetIndex])
    let neutrinoAmount = convertWavesToNeutrino(userWavesLockedBalance, price)
    let wavesAmount = convertNeutrinoToWaves(userNeutrinoLockedBalance, price)
            
    if(isBlocked)
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles") # see control.ride
    else if(unlockHeight > height)
        then throw("please wait for: " + toString(unlockHeight) + " block height to withdraw WAVES funds")
    else if(index > providingIndex  || indexHeight < unlockHeight || (prevIndexHeight != 0 && unlockHeight <= prevIndexHeight))
        then throw("invalid price history index: index=" + toString(index)
                + " providingIndexprovidingIndex=" + toString(providingIndex)
                + " indexHeight=" + toString(indexHeight)
                + " unlockHeight=" + toString(unlockHeight)
                + " prevIndexHeight=" + toString(prevIndexHeight))
    else if(neutrinoAmount <= 0 && wavesAmount <= 0)
        then throw("balance equals zero")
    else {   
        ScriptResult(
            WriteSet([
                DataEntry(SwapAssetIndexKey, ""),
                DataEntry(getWavesLockedBalanceKey(account), 0),
                DataEntry(getNeutrinoLockedBalanceKey(account), 0)
            ]),
            TransferSet([
                ScriptTransfer(addressFromStringValue(account), wavesAmount, unit),
                ScriptTransfer(addressFromStringValue(account), neutrinoAmount, fromBase58String(assets.split(",")[assetIndex]))
            ])
        )
    }
}

# Transfers bonds from neutrino.ride to auction.ride to fulfill 'buy bonds' orders
# Is called n-times during the deficit stage until all pending orders on auction.ride are fulfilled
# [called by pacemaker oracles]
@Callable(i)
func transferToAuction() = {
    let deficitBondAmount = convertNeutrinoToBond(deficit) - assetBalance(addressFromStringValue(auctionContract), bondAssetId)

    let surplusWithLiquidation = (surplus - assetBalance(addressFromStringValue(liquidationContract), neutrinoAssetId))/PAULI
    if(isBlocked)
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions untill reactivation by emergency oracles") # see control.ride
    else if(deficitBondAmount > 0)
        then TransferSet([ScriptTransfer(addressFromStringValue(auctionContract), deficitBondAmount, bondAssetId)])
    else if(surplusWithLiquidation >= 1)
        then TransferSet([ScriptTransfer(addressFromStringValue(liquidationContract), surplusWithLiquidation*PAULI, neutrinoAssetId)])
    else 
        throw("bond were generated or do not need it. Deficit:" + toString(deficitBondAmount) + "|" + "TODO min deficit" + ". Surplus:" + toString(surplusWithLiquidation) + "|" + toString(surplus))
}

# LeaseCancelTransaction depends from swapNeutrinoToWaves() result i.e. waves amount is not enought for future swaps
# or end of leasing time
@Verifier(tx)
 func verify() = {
    let id = toBase58String(tx.id)
    match tx {
        case leasingTx: LeaseTransaction | LeaseCancelTransaction =>
            sigVerify(tx.bodyBytes, tx.proofs[0], nodeOracleProviderPubKey)
        case _ => {
            let pubKeyAdminsList = [
                "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
                "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
                "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
                "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
            ]
            let count =
                (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
                (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
                (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
                (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

            count >= 3
        }
    }
}