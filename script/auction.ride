{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
#
# Smart Contract Implementing NSBT Auction in the Orderbook of Neutrino Protocol
#

#-------------------Base functions----------------------
func getNumberByKey(key: String) = {
    getInteger(this, key).valueOrElse(0)
}

func getStringByKey(key: String) = {
    getString(this, key).valueOrElse("")
}

func getBoolByAddressAndKey(address: Address, key: String) = {
     getBoolean(address, key).valueOrElse(false)
}

func getStringByAddressAndKey(address: Address, key: String) = {
   getString(address, key).valueOrElse("")
}

func getNumberByAddressAndKey(address: Address, key: String) = {
    getInteger(address, key).valueOrElse(0)
}

#-------------------Constants---------------------------
let WAVELET = 100000000
let PAULI = 1000000
let PRICELET = 1000000 # 10^6

let MINORDERTOTAL = 10*WAVELET
let MAXROI = 95
#------Order statuses------
let CANCELED = "canceled"
let NEW = "new"
let FILLED = "filled"

#-------------------Constructor-------------------------

#-------------------Keys--------------------------------
let PriceKey = "price"
let BondAssetIdKey = "bond_asset_id"
let NeutrinoAssetIdKey = "neutrino_asset_id"
let BalanceLockedkKey = "balance_lock_"
let WavesLockedBalanceKey = BalanceLockedkKey + "waves"
let NeutrinoLockedBalanceKey = BalanceLockedkKey + "neutrino"
let FirstOrderKey = "order_first"

func getRoiByOrderIdKey(orderId: String) = "debug_order_roi_" + orderId

func getOrderPriceKey(orderId: String) = "order_price_" + orderId
func getOrderTotalKey(orderId: String) = "order_total_" + orderId
func getOrderOwnerKey(orderId: String) = "order_owner_" + orderId
func getOrderHeightKey(orderId: String) = "order_height_" + orderId
func getOrderStatusKey(orderId: String) = "order_status_" + orderId
func getOrderFilledTotalKey(orderId: String) = "order_filled_total_" + orderId

func getPrevOrderKey(orderId: String) = "order_prev_" + orderId
func getNextOrderKey(orderId: String) = "order_next_" + orderId
#-------------------Convert functions-------------------
func convertNeutrinoToWaves(amount: Int, price: Int) = fraction(fraction(amount, PRICELET, price),WAVELET, PAULI)
func convertWavesToNeutrino(amount: Int, price: Int) = fraction(fraction(amount, price, PRICELET), PAULI, WAVELET)

func convertWavesToBond(amount: Int, price: Int) = convertWavesToNeutrino(amount, price)
func convertBondToWaves(amount: Int, price: Int) = convertNeutrinoToWaves(amount, price)

#-------------------Global vars-------------------------
let neutrinoContract = Address(base58'3PC9BfRwJWWiw9AREE2B3eWzCks3CYtg4yo')
let controlContract = Address(base58'3P5Bfd58PPfNvBM2Hy8QfbcDqMeNtzg7KfP') ## The value from neutrino.ride
let liquidationContract = Address(base58'3P4PCxsJqMzQBALo8zANHtBDZRRquobHQp7')
let neutrinoAssetId = base58'DG2xFkPdDwKUoBkzGAhQtLpSGzfXLiCYPEzeKH2Ad24p' # Assets ids. The value from neutrino.ride
let bondAssetId = base58'6nSpVyNH7yM69eg446wrQR94ipbbcmZMU1ENPwanC97g' # NSBT with 6 decimals as USDN does

let isBlocked = getBoolByAddressAndKey(controlContract, "is_blocked")

#-------------------Global vars deficit, locked & supply -------------------------
let currentPrice = getNumberByAddressAndKey(controlContract, PriceKey) # The value from control.ride
let neutrinoLockedBalance = getNumberByAddressAndKey(neutrinoContract, NeutrinoLockedBalanceKey) #locked balance from USDN -> WAVES swap
#cannot be expressed by complexity limitations: let wavesLockedBalance = getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey) #locked balance from WAVES -> USDN swap
let reserve = wavesBalance(neutrinoContract).regular -
    getNumberByAddressAndKey(neutrinoContract, WavesLockedBalanceKey) #waves reserves to cover USDN supply
let reservesInUsdn = convertWavesToNeutrino(reserve, currentPrice)
let neutrinoSupply = neutrinoLockedBalance + assetInfo(neutrinoAssetId).value().quantity - assetBalance(neutrinoContract, neutrinoAssetId) - assetBalance(liquidationContract, neutrinoAssetId) # supply outside main sc or liquidation contract
let deficit = neutrinoSupply - reservesInUsdn
let currentMaxRoi = fraction(deficit, 100, neutrinoSupply)
let multBR = 1000
let currentBR = fraction(reservesInUsdn, multBR, neutrinoSupply)
let firstOrder = getStringByKey(FirstOrderKey)

#-------------------Get functions----------------------
func getOrderPrice(id : String) = getNumberByKey(getOrderPriceKey(id))
func getOrderTotal(id : String) = getNumberByKey(getOrderTotalKey(id))
func getOrderOwner(id : String) = getStringByKey(getOrderOwnerKey(id))
func getOrderStatus(id : String) = getStringByKey(getOrderStatusKey(id))
func getOrderFilledTotal(id : String) = getNumberByKey(getOrderFilledTotalKey(id))
func getPrevOrder(id: String) = getStringByKey(getPrevOrderKey(id))
func getNextOrder(id: String) = getStringByKey(getNextOrderKey(id))

func getPriceForRoi(roiPercents: Int) = {fraction(100 + roiPercents, currentPrice, 100)}
func getReversePrice(price: Int) = {PRICELET * PRICELET / price}

#------------------- -------------
#-------------------Any functions----------------------

func orderData(orderId: String, totalWavelets: Int, filledWavelets: Int, owner: String, status: String, roi: Int, price: Int) = {
    [IntegerEntry(getOrderPriceKey(orderId), price), # currently it is kept for backwards compatibility with cache-updater: see https://github.com/waves-exchange/cache-updater/blob/master/src/entities/bondsorder.go#L143
     IntegerEntry(getOrderTotalKey(orderId), totalWavelets),
     IntegerEntry(getOrderFilledTotalKey(orderId), filledWavelets),
     StringEntry(getOrderOwnerKey(orderId), owner),
     IntegerEntry(getOrderHeightKey(orderId), height),
     StringEntry(getOrderStatusKey(orderId), status),
     IntegerEntry("debug_order_currentPrice_" + orderId, currentPrice),
     IntegerEntry(getRoiByOrderIdKey(orderId), roi)
    ]
}

func internalSellBond(pFirstOrder: String, pNextOrder: String, pFilledTotal: Int, pRoi: Int, pPrice: Int, pPaymentWavelets: Int, orderOwnerAddress: Address, instantOrder: Boolean) = {
    let priceWavesByBondCents = getPriceForRoi(pRoi)

    let remainedTotal = pPaymentWavelets - pFilledTotal #waveletes

    let fillableOrderAmount = convertWavesToBond(remainedTotal, priceWavesByBondCents); # expected price format 100*waves/usd; return scale: nsbt (integers/dollars)

    let totalOrderWaveletesRequired = convertBondToWaves(fillableOrderAmount, priceWavesByBondCents) # expected in wavelets

# WARNING: COPY/PASTED SECTION #5 because of complexity estimator defect SC-626 - if you plan to modify then check all 2 places:
# 1) 'func internalAddBuyBondOrder':    && currentMaxRoi >= roi
# 2) 'func internalSellBond':           let nbTokensSellCondition = currentMaxRoi >= pRoi
    let nbTokensSellCondition = currentMaxRoi >= pRoi # it's working for both: deficit & profict as well (15% > 10% and -15% < -10%)

    if (!nbTokensSellCondition) then throw("innapropriate roi: " + toString(pRoi)) else
    if(totalOrderWaveletesRequired == 0) then throw("cannot fill order at the moment") else #if not enough nsbt to fill the order by order price
    # change (trifle) which can appear because of decimals difference between wavelet (10^8) and nsbt (10^6)
    let changeWavelets = remainedTotal - totalOrderWaveletesRequired

    let writeSetData = if (instantOrder) then {
        orderData(pFirstOrder, pPaymentWavelets, pFilledTotal + totalOrderWaveletesRequired, toBase58String(orderOwnerAddress.bytes), FILLED, pRoi, currentPrice)
    } else {
        [IntegerEntry(getOrderFilledTotalKey(pFirstOrder), pFilledTotal + totalOrderWaveletesRequired),
        StringEntry(getOrderStatusKey(pFirstOrder), FILLED), # filled status if there is no remained waveletes in the order
        StringEntry(getPrevOrderKey(pNextOrder), ""),
        StringEntry(FirstOrderKey, pNextOrder)]
    }

    writeSetData ++ [
        ScriptTransfer(orderOwnerAddress, fillableOrderAmount, bondAssetId),
        ScriptTransfer(neutrinoContract, totalOrderWaveletesRequired, unit),
        ScriptTransfer(orderOwnerAddress, changeWavelets, unit)
    ]
}

func internalAddBuyBondOrder(roi : Int, price: Int, prevOrder: String, inv: Invocation, instantOrder: Boolean) = {
    let pmt = inv.payments[0].value();
    let newOrderId = toBase58String(inv.transactionId)

    if (isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles") else
    if (currentBR < 1 * multBR) then throw("impossible to buy nsbt with discount in surplus - BR=" + currentBR.toString() + "/" + multBR.toString()) else
    if (pmt.amount < MINORDERTOTAL) then throw("min order total equals " + toString(MINORDERTOTAL)) else
    if (roi > MAXROI) then throw("max setOrder ROI is 95%") else
    if (deficit > 0 && roi < 0) then throw("can't place order with negative roi during deficit") else
    if (roi < -MAXROI) then throw("min setOrder ROI is -95%") else
    if (roi == 0) then throw("roi should not be equal to 0") else
    if (isDefined(pmt.assetId)) then throw("can use waves only") else
    if (getOrderOwner(newOrderId) != "") then throw("order exists") else
    if (prevOrder != "" && getOrderStatus(prevOrder) != NEW) then throw("prev order status is not new") else

    let isNewOrderAtFirstPosition = prevOrder == ""
    let owner = toString(inv.caller)
    let nextOrder = if isNewOrderAtFirstPosition then firstOrder else getNextOrder(prevOrder)
    let nextOrderRoi = getNumberByKey(getRoiByOrderIdKey(nextOrder))
    let isNextOrderError = if(nextOrder != "" && roi >= nextOrderRoi) then true else false;

    let prevOrderRoi = getNumberByKey(getRoiByOrderIdKey(prevOrder))
    let isPrevOrderError = if(prevOrder != "" && roi < prevOrderRoi) then true else false;

    if (isNextOrderError || isPrevOrderError) then throw("invalid order isPrevOrderError:" + toString(isPrevOrderError) + " isNextOrderError:" + toString(isNextOrderError)) else
# WARNING: COPY/PASTED SECTION #5 because of complexity estimator defect SC-626 - if you plan to modify then check all 2 places:
# 1) 'func internalAddBuyBondOrder':    && currentMaxRoi >= roi
# 2) 'func internalSellBond':           let nbTokensSellCondition = currentMaxRoi >= pRoi
    if (isNewOrderAtFirstPosition && currentMaxRoi >= roi) then {
        internalSellBond(newOrderId, nextOrder, 0, roi, price, pmt.amount, inv.caller, true)
    } else if (instantOrder) then {
        throw("Instant order couldn't be added into waiting queue")
    } else
        [StringEntry(getPrevOrderKey(newOrderId), prevOrder),
        StringEntry(getNextOrderKey(newOrderId), nextOrder),

        StringEntry(getNextOrderKey(prevOrder), if prevOrder == "" then "" else newOrderId),
        StringEntry(getPrevOrderKey(nextOrder), if nextOrder == "" then "" else newOrderId),

        StringEntry(FirstOrderKey, if firstOrder == "" || firstOrder == nextOrder then newOrderId else firstOrder)
        ] ++ orderData(newOrderId, pmt.amount, 0, owner, NEW, roi, price)
}

func curveFunction(wRaw: Int, uRaw: Int) = {
    let mult = 1000 * 1000              #!!! TODO exists
    let multScale = 6                   #!!! TODO exists
    let EXP = 2718281

    let p = 3 * PRICELET                #!!! TODO exists

    let a = 3 #!!! TODO read from state

    let wReservesInUsdn = convertWavesToNeutrino(wRaw, p)
    let brMult = fraction(wReservesInUsdn, mult, uRaw)
    let powerMult = a * (brMult - 1 * mult)
    let expInPowerMult = pow(EXP, multScale, powerMult, multScale, multScale, DOWN)

    let constCoeff = fraction(uRaw, PRICELET, a * p)
    let finalResult = fraction(constCoeff, mult, expInPowerMult)
    (wReservesInUsdn, brMult, powerMult, expInPowerMult, constCoeff, finalResult)
}
#-------------------Callable---------------------------

func toStr(name: String, l: (Int, Int, Int, Int, Int, Int)) = {
    name + "=[wReservesInUsdn=" + toString(l._1)
        + " brMult=" + toString(l._2)
        + " powerMult=" + toString(l._3)
        + " expInPowerMult=" + toString(l._4)
        + " constCoeff=" + toString(l._5)
        + " finalResult=" + toString(l._6)
        + "]"
}

@Callable(i)
func buyNsbtInSurplus(wDec: Int, payDec: Int, uDec: Int) = {
    let wRaw = wDec * WAVELET
    let payRaw = payDec * WAVELET
    let uRaw = uDec * PAULI
    let f1 = curveFunction(wRaw, uRaw)
    let f2 = curveFunction(wRaw + payRaw, uRaw)
    if (f1._1 > 1) then throw(toStr("f1", f1) + "\n" + toStr("f2", f2)) else
    []
}

# set buy NSBT order
# [called by user]
@Callable(i)
func instantBuyNsbtOrFail(noLessThenRoi : Int) = {
    let pmt = i.payments[0].value()
    let roi = currentMaxRoi

    if (noLessThenRoi > roi) then throw("Current maxRoi=" + roi.toString() + " is less then passed parameter noLessThenRoi=" + noLessThenRoi.toString()) else

    let priceWavesByBondCents = getPriceForRoi(roi)

    internalAddBuyBondOrder(
        roi,
        getReversePrice(priceWavesByBondCents), # it is price which is used just to keep backward compatibility (save price into state) and in the next functions it doesn't used in any computations
        "",
        i,
        true)
}

# set buy NSBT order
# [called by user]
@Callable(i)
func addBuyBondOrder(price : Int, prevOrder: String) = {
    let pmt = i.payments[0].value()
    # price = 100*nsbt/waves, but we have to work with price with another scale: priceWavesByBondCents = 100*waves/nsbt, so priceWavesByBondCents = 100*1/(price/100)
    let priceWavesByBondCents = getReversePrice(price)

    if(price <= 0) then throw("price less zero") else

    internalAddBuyBondOrder(
        fraction(priceWavesByBondCents - currentPrice, 100, currentPrice), # User's roi. Example: 1.2 WAVES/nsbt (1.2 NSBT for 1 waves) and 0.8 WAVES/USD (0.8 usd for 1 waves) gives 100*(1.2-0.8/0.8) 50% ROI
        price,
        prevOrder,
        i,
        false)
}


# cancel buy NSBT order or liquidation order
# [called by user]
@Callable(i)
func cancelOrder(orderId : String) = {
    let owner = getOrderOwner(orderId)
    let amount = getOrderTotal(orderId) - getOrderFilledTotal(orderId)
    let caller = toString(i.caller)

    let nextOrder = getNextOrder(orderId)
    let prevOrder = getPrevOrder(orderId)

    if (isBlocked)
        then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles")
    else if(owner != caller)
        then throw("permission denied")
    else if(getOrderStatus(orderId) != NEW)
        then throw("invalid order status")
    else {[
        StringEntry(FirstOrderKey, if firstOrder == orderId then nextOrder else firstOrder),

        StringEntry(getNextOrderKey(prevOrder), nextOrder),
        StringEntry(getPrevOrderKey(nextOrder), prevOrder),
        StringEntry(getOrderStatusKey(orderId), CANCELED),
        ScriptTransfer(i.caller, amount, unit)]
    }
}

# executing buy NSBT orders from the NSBT orderbook
# called n times until all orders from the NSBT orderbook are sold
# [called by pacemaker oracles]
@Callable(i)
func sellBond() = {

    if (isBlocked) then throw("contract is blocked by EMERGENCY SHUTDOWN actions until reactivation by emergency oracles") else
    if (firstOrder == "") then throw("empty orderbook") else {
        let nextOrder = getNextOrder(firstOrder)
        let filledTotal = getOrderFilledTotal(firstOrder) #waveletes; returns 0 if there is no records
        let orderPrice = getOrderPrice(firstOrder) #100*nsbt/waves
        let roi = getNumberByKey(getRoiByOrderIdKey(firstOrder))

        let paymentWavelets = getOrderTotal(firstOrder)
        let orderOwnerAddress = Address(fromBase58String(getOrderOwner(firstOrder)))

        internalSellBond(
            firstOrder,
            nextOrder,
            filledTotal,
            roi,
            orderPrice,
            paymentWavelets,
            orderOwnerAddress,
            false)
    }
}

@Verifier(tx)
func verify() = {
    let pubKeyAdminsList = [
        "BLEoguzPVKVTfXxxT3W7Rqf8aUm2ggC9Vemd2MQawM2G",
        "FWVffYr2ALmHMejZm3WqeLz6Sdym3gLFGtJn4KTwyU5x",
        "3Wh2LaWcb5gg7K2pPcW3Ep6EAuRBzYkAgrdpt43jTDFa",
        "5WRXFSjwcTbNfKcJs8ZqXmSSWYsSVJUtMvMqZj5hH4Nc"
    ]
    let count =
        (if(sigVerify(tx.bodyBytes, tx.proofs[0], fromBase58String(pubKeyAdminsList[0]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[1], fromBase58String(pubKeyAdminsList[1]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[2], fromBase58String(pubKeyAdminsList[2]))) then 1 else 0) +
        (if(sigVerify(tx.bodyBytes, tx.proofs[3], fromBase58String(pubKeyAdminsList[3]))) then 2 else 0)

    count >= 3
}
